(define (make-vect x y) (cons x y))
(define (xcor-vect vec) (car vec))
(define (ycor-vect vec) (cdr vec))
(define (map-vect f . vec)
    (make-vect 
        (apply f (map xcor-vect vec))
        (apply f (map ycor-vect vec))))
(define (add-vect . vec)
    (apply map-vect (cons + vec)))
(define (sub-vect . vec)
    (apply map-vect (cons - vec)))
(define (dot-product . vec)
    (+ (apply * (map xcor-vect vec))
        (apply * (map ycor-vect vec))))
(define (scale-vect s vec)
    (map-vect (lambda (x) (* x s)) vec))
(define (cross-product p1 p2)
    (- (* (xcor-vect p1) (ycor-vect p2))
        (* (xcor-vect p2) (ycor-vect p1))))
(define (make-frame origin edge1 edge2)
    (list origin edge1 edge2))
(define (origin-frame frame) (car frame))
(define (edge1-frame frame) (cadr frame))
(define (edge2-frame frame) (caddr frame))
(define (frame-coord-map frame)
    (lambda (v)
        (add-vect
            (origin-frame frame)
            (add-vect
                (scale-vect
                    (xcor-vect v)
                    (edge1-frame frame))
                (scale-vect
                    (ycor-vect v)
                    (edge2-frame frame))))))
(define (make-segment st en) (cons st en))
(define (start-segment seg) (car seg))
(define (end-segment seg) (cdr seg))
(define (online? seg vec)
    (let ((vec1 (sub-vect vec (start-segment seg)))
            (vec2 (sub-vect vec (end-segment seg))))
        (and (= (cross-product vec1 vec2) 0)
            (< (dot-product vec1 vec2) 0))))
(define (draw-canvas seg xlen ylen)
    (define (draw-col y)
        (define (draw-point x)
            (if (= x xlen) (newline)
                (begin
                    (if (online? seg (make-vect x y))
                        (display "*")
                        (display " "))
                    (draw-point (+ x 1)))))
        (if (< y 0) (newline)
            (begin
                (draw-point 0)
                (draw-col (- y 1)))))
    (draw-col (- ylen 1)))
(define (draw-line st-seg en-seg)
    (draw-canvas (make-segment st-seg en-seg) 16 16))
(define (segments-pointer segment-list)
    (lambda (frame)
        (for-each
            (lambda (segment)
                (draw-line
                    ((frame-coord-map frame) (start-segment segment))
                    ((frame-coord-map frame) (end-segment segment))))
            segment-list)))
(define (transform-painter painter origin corner1 corner2)
    (lambda (frame)
        (let ((m (frame-coord-map frame)))
            (let ((new-origin (m origin)))
                (painter
                    (make-frame new-origin
                        (sub-vect (m corner1) new-origin)
                        (sub-vect (m corner2) new-origin)))))))